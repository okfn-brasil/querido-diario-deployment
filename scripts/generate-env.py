#!/usr/bin/env python3
"""
Script interativo para gerar arquivos de environment com composi√ß√£o de dom√≠nios.

Uso:
    python3 generate-interactive-env.py dev      # Gera .env para desenvolvimento
    python3 generate-interactive-env.py prod     # Gera .env.production para produ√ß√£o

O script permite ao usu√°rio definir o dom√≠nio e automaticamente comp√µe todas as
vari√°veis relacionadas (API, Backend, CORS, URLs, etc.)
"""

import sys
import re
from pathlib import Path
from typing import Dict, Tuple, Optional


def get_domain_from_user(env_type: str, use_default: bool = False) -> str:
    """Solicita dom√≠nio do usu√°rio com valida√ß√£o ou usa valor padr√£o"""
    default_domain = "queridodiario.local"

    if use_default:
        print(f"üåê Usando dom√≠nio padr√£o: {default_domain}")
        return default_domain

    if env_type == "dev":
        print(f"üè† Configurando ambiente de DESENVOLVIMENTO")
    else:
        print(f"üöÄ Configurando ambiente de PRODU√á√ÉO")

    print(f"")
    print(f"üìç Qual dom√≠nio principal ser√° usado?")
    print(f"   Exemplo: {default_domain}")
    print(f"")
    print(f"üí° Os seguintes subdom√≠nios ser√£o criados automaticamente:")
    print(f"   ‚Ä¢ Frontend: https://SEU_DOMINIO")
    print(f"   ‚Ä¢ API: https://api.SEU_DOMINIO")
    print(f"   ‚Ä¢ Backend/Admin: https://backend-api.SEU_DOMINIO")
    print(f"")

    while True:
        domain = input(f"Dom√≠nio [{default_domain}]: ").strip()

        if not domain:
            domain = default_domain
            break

        # Valida√ß√£o b√°sica de dom√≠nio
        if not re.match(r"^[a-zA-Z0-9.-]+\.[a-zA-Z]{2,}$", domain):
            print(
                "‚ùå Formato de dom√≠nio inv√°lido. Use formato como: exemplo.com ou sub.exemplo.org"
            )
            continue

        break

    print(f"")
    print(f"‚úÖ Dom√≠nio definido: {domain}")
    print(f"üìç URLs que ser√£o configuradas:")
    print(f"   ‚Ä¢ Frontend: https://{domain}")
    print(f"   ‚Ä¢ API: https://api.{domain}")
    print(f"   ‚Ä¢ Backend/Admin: https://backend-api.{domain}")
    print(f"")

    return domain


def get_protocol_and_ports(env_type: str) -> Tuple[str, str, str]:
    """Retorna protocolo e portas baseado no tipo de ambiente"""
    if env_type == "dev":
        # Desenvolvimento: HTTP local com portas espec√≠ficas
        return "http", "4200", "8000"
    else:
        # Produ√ß√£o: HTTPS sem portas (443 impl√≠cita)
        return "https", "", ""


def compose_domain_variables(domain: str, env_type: str) -> Dict[str, str]:
    """Comp√µe todas as vari√°veis relacionadas ao dom√≠nio"""
    protocol, frontend_port, backend_port = get_protocol_and_ports(env_type)

    if env_type == "dev":
        # Desenvolvimento: localhost com portas espec√≠ficas
        frontend_url = f"http://localhost:{frontend_port}"
        backend_static_url = f"http://localhost:{backend_port}/api/static/"

        # Para desenvolvimento, permitir tanto localhost quanto o dom√≠nio configurado
        allowed_hosts = f"localhost,backend-api.{domain},127.0.0.1"
        allowed_origins = f"http://localhost:{frontend_port},http://localhost:{backend_port},http://{domain}"
        csrf_origins = f"http://localhost:{backend_port},http://backend-api.{domain}"
        cors_allow_origins = frontend_url  # Frontend localhost para CORS
    else:
        # Produ√ß√£o: dom√≠nios com HTTPS
        frontend_url = f"{protocol}://{domain}"
        backend_url = f"{protocol}://backend-api.{domain}"
        backend_static_url = f"{backend_url}/api/static/"

        allowed_hosts = f"backend-api.{domain},{domain}"
        allowed_origins = f"{frontend_url},{backend_url}"
        csrf_origins = backend_url
        cors_allow_origins = frontend_url

    return {
        "DOMAIN": domain,
        "QD_BACKEND_ALLOWED_HOSTS": allowed_hosts,
        "QD_BACKEND_ALLOWED_ORIGINS": allowed_origins,
        "QD_BACKEND_CSRF_TRUSTED_ORIGINS": csrf_origins,
        "STATIC_URL": backend_static_url,
        "FRONT_BASE_URL": frontend_url,
        "QUERIDO_DIARIO_CORS_ALLOW_ORIGINS": cors_allow_origins,
        "DEFAULT_FROM_EMAIL": f"noreply@{domain}",
        "SERVER_EMAIL": f"server@{domain}",
        "QUOTATION_TO_EMAIL": f"quotes@{domain}",
        "QUERIDO_DIARIO_SUGGESTION_RECIPIENT_EMAIL": f"team@{domain}",
    }


def read_template() -> str:
    """L√™ o arquivo template completo"""
    template_file = Path("templates/env.complete.sample")
    if not template_file.exists():
        raise FileNotFoundError("templates/env.complete.sample n√£o encontrado!")

    return template_file.read_text(encoding="utf-8")


def apply_domain_substitutions(content: str, substitutions: Dict[str, str]) -> str:
    """Aplica as substitui√ß√µes de dom√≠nio no conte√∫do"""
    print(f"üîÑ Aplicando substitui√ß√µes de dom√≠nio...")

    for key, value in substitutions.items():
        # Procura por linhas que definem a vari√°vel (tanto ativas quanto comentadas)
        pattern = rf"^(#\s*)?{re.escape(key)}=.*$"
        replacement = f"{key}={value}"

        if re.search(pattern, content, re.MULTILINE):
            content = re.sub(pattern, replacement, content, flags=re.MULTILINE)
            print(f"  ‚úÖ {key} = {value}")
        else:
            # Se a vari√°vel n√£o existe, adiciona no final da se√ß√£o apropriada
            print(f"  ‚ûï Adicionando {key} = {value}")
            # Adiciona antes da primeira linha vazia ou no final
            if "\n\n" in content:
                parts = content.split("\n\n", 1)
                content = parts[0] + f"\n{key}={value}\n\n" + parts[1]
            else:
                content += f"\n{key}={value}\n"

    return content


def load_overrides(override_file: str) -> Dict[str, str]:
    """Carrega valores de um arquivo de sobrescritas"""
    if not Path(override_file).exists():
        raise FileNotFoundError(f"Arquivo de sobrescritas n√£o encontrado: {override_file}")

    print(f"üìÇ Carregando sobrescritas de: {override_file}")

    overrides = {}
    with open(override_file, 'r', encoding='utf-8') as f:
        for line_num, line in enumerate(f, 1):
            line = line.strip()
            # Ignora coment√°rios e linhas vazias
            if not line or line.startswith('#'):
                continue

            # Processa linhas no formato KEY=VALUE
            if '=' in line:
                key, value = line.split('=', 1)
                key = key.strip()
                value = value.strip()

                # Remove aspas se presentes
                if (value.startswith('"') and value.endswith('"')) or \
                   (value.startswith("'") and value.endswith("'")):
                    value = value[1:-1]

                overrides[key] = value
                print(f"  ‚úÖ {key} = {value[:50]}{'...' if len(value) > 50 else ''}")
            else:
                print(f"  ‚ö†Ô∏è Linha {line_num} ignorada (formato inv√°lido): {line}")

    print(f"üìã Carregadas {len(overrides)} vari√°veis do arquivo de sobrescritas")
    return overrides


def apply_overrides(content: str, overrides: Dict[str, str]) -> str:
    """Aplica sobrescritas ao conte√∫do"""
    if not overrides:
        return content

    print(f"üîß Aplicando {len(overrides)} sobrescritas...")

    for key, value in overrides.items():
        # Procura por linhas que definem a vari√°vel (tanto ativas quanto comentadas)
        pattern = rf"^(#\s*)?{re.escape(key)}=.*$"
        replacement = f"{key}={value}"

        if re.search(pattern, content, re.MULTILINE):
            content = re.sub(pattern, replacement, content, flags=re.MULTILINE)
            print(f"  ‚úÖ {key} atualizado")
        else:
            # Se a vari√°vel n√£o existe, adiciona no final
            print(f"  ‚ûï {key} adicionado")
            content += f"\n{key}={value}\n"

    return content


def remove_production_overrides_section(content: str) -> str:
    """Remove a se√ß√£o SOBRESCRITAS DE PRODU√á√ÉO para evitar duplica√ß√µes"""
    print(f"üóëÔ∏è Removendo se√ß√£o SOBRESCRITAS DE PRODU√á√ÉO...")

    # Remove toda a se√ß√£o entre # PRODUCTION-START e # PRODUCTION-END
    pattern = r'# =============================================================================\n# üîÑ SOBRESCRITAS DE PRODU√á√ÉO.*?# PRODUCTION-END'
    content = re.sub(pattern, '', content, flags=re.DOTALL)

    # Remove linhas vazias excessivas que podem ter ficado
    content = re.sub(r'\n{3,}', '\n\n', content)

    return content


def apply_environment_specific_settings(content: str, env_type: str) -> str:
    """Aplica configura√ß√µes espec√≠ficas do ambiente"""
    if env_type == "dev":
        # Configura√ß√µes de desenvolvimento
        dev_settings = {
            "QD_BACKEND_DEBUG": "True",
            "QUERIDO_DIARIO_DEBUG": "True",
            "DEBUG": "1",
            "DATA_PROCESSING_DEBUG": "1",
        }

        for key, value in dev_settings.items():
            pattern = rf"^(#\s*)?{re.escape(key)}=.*$"
            replacement = f"{key}={value}"
            content = re.sub(pattern, replacement, content, flags=re.MULTILINE)

    else:
        # Configura√ß√µes de produ√ß√£o
        prod_settings = {
            "QD_BACKEND_DEBUG": "False",
            "QUERIDO_DIARIO_DEBUG": "False",
            "DEBUG": "0",
            "DATA_PROCESSING_DEBUG": "0",
        }

        for key, value in prod_settings.items():
            pattern = rf"^(#\s*)?{re.escape(key)}=.*$"
            replacement = f"{key}={value}"
            content = re.sub(pattern, replacement, content, flags=re.MULTILINE)

    return content


def add_environment_header(content: str, env_type: str, domain: str) -> str:
    """Adiciona cabe√ßalho espec√≠fico do ambiente"""
    timestamp = __import__("datetime").datetime.now().strftime("%Y-%m-%d %H:%M:%S")

    if env_type == "dev":
        header = f"""# Querido Di√°rio - Development Environment
# ==========================================
#
# Auto-generated on {timestamp}
# Domain configured: {domain}
#
# URLs configuradas:
# ‚Ä¢ Frontend: http://localhost:4200 (development server)
# ‚Ä¢ API: http://localhost:8080 ‚Üí api.{domain} (via Traefik)
# ‚Ä¢ Backend: http://localhost:8000 ‚Üí backend-api.{domain} (via Traefik)
#
# Para regenerar: make setup-env-dev

"""
    else:  # prod
        header = f"""# Querido Di√°rio - Production Environment
# =========================================
#
# Auto-generated on {timestamp}
# Domain configured: {domain}
#
# URLs configuradas:
# ‚Ä¢ Frontend: https://{domain}
# ‚Ä¢ API: https://api.{domain}
# ‚Ä¢ Backend/Admin: https://backend-api.{domain}
#
# Para regenerar: make setup-env-prod
#
# IMPORTANTE: Revise e configure antes de fazer deploy:
# - Strings de conex√£o de banco de dados externos
# - Endpoints e credenciais do OpenSearch
# - Endpoints e credenciais de storage
# - Credenciais do servi√ßo de email
# - Chave secreta do Django (QD_BACKEND_SECRET_KEY)

"""

    return header + content


def generate_env_file(env_type: str, use_default: bool = False, override_file: Optional[str] = None) -> None:
    """Gera arquivo de environment espec√≠fico com intera√ß√£o do usu√°rio ou valor padr√£o"""
    if env_type not in ["dev", "prod"]:
        raise ValueError("env_type deve ser 'dev' ou 'prod'")

    # Solicita dom√≠nio do usu√°rio ou usa padr√£o
    domain = get_domain_from_user(env_type, use_default)

    # L√™ template
    print(f"üìñ Lendo template completo...")
    content = read_template()

    # Comp√µe vari√°veis de dom√≠nio
    print(f"‚öôÔ∏è Compondo vari√°veis de dom√≠nio...")
    domain_vars = compose_domain_variables(domain, env_type)

    # Aplica substitui√ß√µes
    content = apply_domain_substitutions(content, domain_vars)

    # Remove se√ß√£o de sobrescritas de produ√ß√£o para evitar duplica√ß√µes
    content = remove_production_overrides_section(content)

    # Aplica configura√ß√µes espec√≠ficas do ambiente
    print(f"üîß Aplicando configura√ß√µes de {env_type}...")
    content = apply_environment_specific_settings(content, env_type)

    # Aplica sobrescritas se arquivo fornecido
    if override_file:
        try:
            overrides = load_overrides(override_file)
            content = apply_overrides(content, overrides)
            if env_type == "dev":
                print(f"üí° Sobrescritas aplicadas ao ambiente de desenvolvimento")
        except FileNotFoundError as e:
            print(f"‚ö†Ô∏è {e}")
            print(f"üí° Continuando sem sobrescritas...")

    # Define arquivo de sa√≠da
    if env_type == "dev":
        output_file = ".env"
    else:
        output_file = ".env.production"

    # Adiciona cabe√ßalho
    print(f"üìù Adicionando cabe√ßalho...")
    content = add_environment_header(content, env_type, domain)

    # Limpa linhas vazias excessivas
    content = re.sub(r"\n{3,}", "\n\n", content)

    # Salva arquivo
    print(f"üíæ Salvando {output_file}...")
    Path(output_file).write_text(content, encoding="utf-8")

    print(f"")
    print(f"‚úÖ Arquivo {output_file} gerado com sucesso!")
    print(f"")
    print(f"üìã Resumo das configura√ß√µes:")
    for key, value in domain_vars.items():
        print(f"   {key} = {value}")

    if env_type == "prod":
        print(f"")
        print(f"‚ö†Ô∏è  Pr√≥ximos passos para produ√ß√£o:")
        print(f"   1. Revise o arquivo {output_file}")
        print(f"   2. Configure strings de conex√£o de servi√ßos externos")
        print(f"   3. Configure chave secreta do Django")
        print(f"   4. Fa√ßa deploy com: make prod")


def main():
    """Fun√ß√£o principal"""
    if len(sys.argv) < 2 or len(sys.argv) > 4:
        print("Uso: python3 generate-env.py <dev|prod> [--default] [--override-file=ARQUIVO]")
        print("")
        print("Argumentos:")
        print("  dev|prod                    Tipo de ambiente a gerar")
        print("  --default                   Usa dom√≠nio padr√£o 'queridodiario.local' sem intera√ß√£o")
        print("  --override-file=ARQUIVO     Arquivo com valores de produ√ß√£o para sobrescrever")
        print("")
        print("Comportamento do override:")
        print("  ‚Ä¢ SEM --default: Interativo para dom√≠nio + override aplicado ao final")
        print("  ‚Ä¢ COM --default: Dom√≠nio padr√£o + override aplicado ao final")
        print("")
        print("Exemplos:")
        print(
           "  python3 generate-env.py prod --override-file=prod.env        # Interativo + override"
        )
        print(
            "  python3 generate-env.py prod --default --override-file=prod.env  # Padr√£o + override"
        )
        print(
            "  python3 generate-env.py prod                                 # Apenas interativo"
        )
        sys.exit(1)

    env_type = sys.argv[1]
    use_default = False
    override_file = None

    # Processa argumentos opcionais
    for arg in sys.argv[2:]:
        if arg == "--default":
            use_default = True
        elif arg.startswith("--override-file="):
            override_file = arg.split("=", 1)[1]
        else:
            print(f"‚ùå Erro: argumento desconhecido '{arg}'")
            sys.exit(1)

    if env_type not in ["dev", "prod"]:
        print("‚ùå Erro: tipo deve ser 'dev' ou 'prod'")
        sys.exit(1)

    try:
        if use_default:
            print("üéØ Querido Di√°rio - Gerador de Ambiente (Modo Padr√£o)")
        else:
            print("üéØ Querido Di√°rio - Gerador Interativo de Ambiente")

        if override_file:
            print(f"üìÇ Arquivo de sobrescritas: {override_file}")

        print("=" * 50)
        print("")
        generate_env_file(env_type, use_default, override_file)
    except KeyboardInterrupt:
        print("\n\n‚ùå Opera√ß√£o cancelada pelo usu√°rio")
        sys.exit(1)
    except Exception as e:
        print(f"\n‚ùå Erro: {e}")
        sys.exit(1)


if __name__ == "__main__":
    main()
