# ---
# Development overrides for Querido Diário
# Use with: docker compose -f docker-compose.yml -f docker-compose.dev.yml up -d --profile dev
services:
  api:
    depends_on:
      postgres:
        condition: service_healthy
      opensearch:
        condition: service_healthy
      opensearch-init:
        condition: service_completed_successfully
      minio:
        condition: service_healthy
    labels:
      - "traefik.http.routers.querido-diario-api.rule=Host(`api.queridodiario.local`) || PathPrefix(`/api`)"
      - "traefik.http.routers.querido-diario-api.entrypoints=web"
      - "traefik.http.routers.querido-diario-api.tls=false"
      - "traefik.http.services.querido-diario-api.loadbalancer.server.port=8080"
    ports:
      - "${API_DEV_PORT:-8080}:8080"  # Expose for direct access in development

  backend:
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
      api:
        condition: service_healthy
    environment:
      QD_API_URL: http://api.queridodiario.local
      QD_BACKEND_DEBUG: ${QD_BACKEND_DEBUG:-True}
      QD_BACKEND_ALLOWED_HOSTS: "*"
      QD_BACKEND_ALLOWED_ORIGINS: http://localhost,http://localhost:4200,http://localhost:8000,http://localhost:8080,http://backend-api.queridodiario.local,http://api.queridodiario.local
      QD_BACKEND_ALLOWED_ORIGIN_REGEXES: "*"
      QD_BACKEND_CSRF_TRUSTED_ORIGINS: http://backend-api.queridodiario.local,http://localhost:8000
      QD_BACKEND_SECRET_KEY: local-execution-django-secret-key
      STATIC_URL: http://backend-api.queridodiario.local/api/static/
      FRONT_BASE_URL: ${FRONT_BASE_URL:-http://localhost:4200} # TODO: CHECK
    labels:
      - "traefik.http.routers.querido-diario-backend.rule=Host(`backend-api.queridodiario.local`) || PathPrefix(`/backend`)"
      - "traefik.http.routers.querido-diario-backend.entrypoints=web"
      - "traefik.http.routers.querido-diario-backend.tls=false"
      - "traefik.http.services.querido-diario-backend.loadbalancer.server.port=8000"
    ports:
      - "${BACKEND_DEV_PORT:-8000}:8000"  # Expose for direct access in development
    command: python manage.py runserver 0.0.0.0:8000  # Use Django dev server

  # Database Services (Development only - excluded in production)
  postgres:
    image: postgres:13
    container_name: querido-diario-postgres
    restart: unless-stopped
    environment:
      POSTGRES_USER: admin
      POSTGRES_PASSWORD: admin
    volumes:
      - postgres-data:/var/lib/postgresql/data
      - ./init-scripts/postgres:/docker-entrypoint-initdb.d
    networks:
      - backend
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U admin -d queridodiario"]
      interval: 30s
      timeout: 10s
      retries: 3
    profiles:
      - dev
      - development
    ports:
      - "${POSTGRES_DEV_PORT:-5432}:5432"  # Expose for direct database access in development

  # OpenSearch for full-text search (Development only - excluded in production)
  opensearch:
    image: opensearchproject/opensearch:2.9.0
    container_name: querido-diario-opensearch
    restart: unless-stopped
    environment:
      - discovery.type=single-node
      - plugins.security.ssl.http.enabled=false
      - "OPENSEARCH_JAVA_OPTS=-Xms512m -Xmx512m"
    volumes:
      - opensearch-data:/usr/share/opensearch/data
    networks:
      - backend
    healthcheck:
      test: ["CMD-SHELL", "curl -f -u admin:admin http://localhost:9200/_cluster/health || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 3
    profiles:
      - dev
      - development
    ports:
      - "${OPENSEARCH_DEV_PORT:-9200}:9200"  # Expose for direct OpenSearch access in development

  # MinIO for file storage (Development only - excluded in production)
  minio:
    image: quay.io/minio/minio:RELEASE.2025-09-07T16-13-09Z
    container_name: querido-diario-minio
    restart: unless-stopped
    environment:
      MINIO_ACCESS_KEY: ${STORAGE_ACCESS_KEY:-minio-access-key}
      MINIO_SECRET_KEY: ${STORAGE_ACCESS_SECRET:-minio-secret-key}
      MINIO_DEFAULT_BUCKETS: ${STORAGE_BUCKET:-queridodiariobucket}:public
      MINIO_ROOT_USER: minio-access-key
      MINIO_ROOT_PASSWORD: minio-secret-key
    volumes:
      - minio-data:/data
    networks:
      - backend
    command: [ "server", "--console-address", ":9001", "/data" ]
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:9000/minio/health/live || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 3
    profiles:
      - dev
      - development
    ports:
      - "${MINIO_DEV_PORT:-9000}:9000"  # Expose for direct MinIO access in development

  # Create bucket on minio. Run once.
  minio-createbucket:
    image: quay.io/minio/mc:RELEASE.2025-03-12T17-29-24Z
    depends_on:
      - minio
    restart: on-failure
    entrypoint: >
      /bin/sh -c "
      sleep 5;
      /usr/bin/mc mb queridodiariobucket;
      exit 0;
      "
    profiles:
      - dev
      - development

  # Create OpenSearch index. Run once.
  opensearch-init:
    image: curlimages/curl:latest
    container_name: querido-diario-opensearch-init
    depends_on:
      opensearch:
        condition: service_healthy
    restart: on-failure
    volumes:
      - ./init-scripts/opensearch/create-opensearch-index.sh:/create-index.sh:ro
    networks:
      - backend
    entrypoint: ["/bin/sh", "/create-index.sh"]
    environment:
      OPENSEARCH_HOST: http://opensearch:9200
      OPENSEARCH_USER: admin
      OPENSEARCH_PASSWORD: admin
      INDEX_NAME: querido-diario
    profiles:
      - dev
      - development

  redis:
    ports:
      - "${REDIS_DEV_PORT:-6378}:6378"  # Expose for direct Redis access in development

  apache-tika:
    ports:
      - "${APACHE_TIKA_DEV_PORT:-9998}:9998"  # Expose for direct Tika access in development

  # Add Celery services dependencies for development
  celery-beat:
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    environment:
      QD_API_URL: http://api.queridodiario.local
      QD_BACKEND_DEBUG: ${QD_BACKEND_DEBUG:-True}
      QD_BACKEND_ALLOWED_HOSTS: "*"
      QD_BACKEND_ALLOWED_ORIGINS: http://localhost,http://localhost:4200,http://localhost:8000,http://localhost:8080,http://backend-api.queridodiario.local,http://api.queridodiario.local
      QD_BACKEND_ALLOWED_ORIGIN_REGEXES: "*"
      QD_BACKEND_CSRF_TRUSTED_ORIGINS: http://backend-api.queridodiario.local,http://localhost:8000
      QD_BACKEND_SECRET_KEY: local-execution-django-secret-key
      STATIC_URL: http://backend-api.queridodiario.local/api/static/
      # TODO: CHECK
      FRONT_BASE_URL: ${FRONT_BASE_URL:-http://localhost:4200}

  celery-worker:
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    environment:
      QD_API_URL: http://api.queridodiario.local
      QD_BACKEND_DEBUG: ${QD_BACKEND_DEBUG:-True}
      QD_BACKEND_ALLOWED_HOSTS: "*"
      QD_BACKEND_ALLOWED_ORIGINS: http://localhost,http://localhost:4200,http://localhost:8000,http://localhost:8080,http://backend-api.queridodiario.local,http://api.queridodiario.local
      QD_BACKEND_ALLOWED_ORIGIN_REGEXES: "*"
      QD_BACKEND_CSRF_TRUSTED_ORIGINS: http://backend-api.queridodiario.local,http://localhost:8000
      QD_BACKEND_SECRET_KEY: local-execution-django-secret-key
      STATIC_URL: http://backend-api.queridodiario.local/api/static/
      # TODO: CHECK
      FRONT_BASE_URL: ${FRONT_BASE_URL:-http://localhost:4200}

  data-processing:
    depends_on:
      postgres:
        condition: service_healthy
      opensearch:
        condition: service_healthy
      minio:
        condition: service_healthy
      apache-tika:
        condition: service_healthy
    environment:
      DEBUG: ${DEBUG:-1}
      EXECUTION_MODE: ${EXECUTION_MODE:-DEVELOPMENT}
    restart: "no"  # Don't auto-restart in development

  traefik:
    command:
      # Providers - Docker
      - --providers.docker=true
      # Esta opção desabilita a exposição automática de containers Docker para o Traefik por padrão.
      # Quando definida como false, os containers só serão expostos se explicitamente tiverem a
      # label traefik.enable=true configurada. Isso proporciona melhor segurança ao exigir
      # configuração explícita para cada serviço que deve ser acessível através do Traefik.
      - --providers.docker.exposedbydefault=false
      - --providers.docker.network=frontend

      # Entrypoints
      - --entrypoints.web.address=:80

      # Logging
      - --log.level=${TRAEFIK_LOG_LEVEL:-DEBUG}
      - --accesslog=true

    ports:
      - "80:80"   # HTTP

    volumes:
      # Socket Docker para descoberta automática
      - /var/run/docker.sock:/var/run/docker.sock:ro

    networks:
      - frontend

    labels:
      # Middlewares Personalizados - Definições Globais
      # Estes middlewares ficam disponíveis para uso em qualquer serviço

      # CORS Headers - Validate
      - "traefik.http.middlewares.cors-headers.headers.accesscontrolallowmethods=GET,POST,OPTIONS,PUT,DELETE"
      - "traefik.http.middlewares.cors-headers.headers.accesscontrolalloworigin=http://${DOMAIN:-queridodiario.local},http://localhost"
      - "traefik.http.middlewares.cors-headers.headers.accesscontrolallowcredentials=true"
      - "traefik.http.middlewares.cors-headers.headers.accesscontrolmaxage=3600"

      # Security Headers - Validate
      - "traefik.http.middlewares.security-headers.headers.frameDeny=true"
      - "traefik.http.middlewares.security-headers.headers.contentTypeNosniff=true"
      - "traefik.http.middlewares.security-headers.headers.browserXssFilter=true"
      - "traefik.http.middlewares.security-headers.headers.referrerPolicy=strict-origin-when-cross-origin"
      - "traefik.http.middlewares.security-headers.headers.stsSeconds=31536000"
      - "traefik.http.middlewares.security-headers.headers.stsIncludeSubdomains=true"
      - "traefik.http.middlewares.security-headers.headers.stsPreload=true"

      # Compression
      - "traefik.http.middlewares.compression.compress=true"

    environment:
      # Configurações opcionais
      - ACME_EMAIL=${ACME_EMAIL:-admin@queridodiario.local}
      - TRAEFIK_LOG_LEVEL=${TRAEFIK_LOG_LEVEL:-DEBUG}

volumes:
  postgres-data:
    driver: local
  opensearch-data:
    driver: local
  minio-data:
    driver: local

networks:
  frontend:
