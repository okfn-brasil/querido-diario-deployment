# Querido Di√°rio Deployment Makefile
# ===================================

.PHONY: help dev dev-build prod prod-build clean validate setup-env-dev setup-env-prod

# Target padr√£o
help: ## Mostra esta mensagem de ajuda
	@echo "üìã Comandos dispon√≠veis:"
	@echo ""
	@grep -E '^[a-zA-Z_-]+:.*?## .*$$' $(MAKEFILE_LIST) | sort | awk 'BEGIN {FS = ":.*?## "}; {printf "  \033[36m%-20s\033[0m %s\n", $$1, $$2}'
	@echo ""
	@echo "üöÄ In√≠cio r√°pido:"
	@echo "  Desenvolvimento: make dev"
	@echo "  Produ√ß√£o:       make prod"
	@echo ""
	@echo "üìã Configura√ß√£o:"
	@echo "  make setup-env-dev    # Gera .env para desenvolvimento"
	@echo "  make setup-env-prod   # Gera .env para produ√ß√£o"
	@echo ""
	@echo "üßπ Limpeza:"
	@echo "  make clean           # Para containers e remove volumes"
	@echo "  make clean-all       # Limpa containers, volumes e arquivos gerados"
	@echo ""

setup-env-dev: ## Gera arquivo .env para desenvolvimento local (dom√≠nio padr√£o)
	@echo "‚öôÔ∏è Gerando arquivo .env para desenvolvimento..."
	@echo "üè† Usando configura√ß√£o padr√£o para desenvolvimento local"
	@cp templates/env.prod.sample .env
	@echo "DOMAIN=queridodiario.local" > .env.temp
	@echo "QD_BACKEND_SECRET_KEY=dev-secret-key-not-for-production" >> .env.temp
	@echo "QD_BACKEND_DEBUG=True" >> .env.temp
	@echo "DEBUG=1" >> .env.temp
	@grep -v "^DOMAIN=" templates/env.prod.sample | grep -v "^QD_BACKEND_SECRET_KEY=" | grep -v "^QD_BACKEND_DEBUG=" | grep -v "^DEBUG=" >> .env.temp
	@mv .env.temp .env
	@echo "‚úÖ Arquivo .env criado para desenvolvimento!"
	@echo "üí° Use 'make dev' para iniciar os servi√ßos."

setup-env-prod: ## Gera arquivo .env para produ√ß√£o (requer edi√ß√£o manual)
	@echo "‚öôÔ∏è Gerando arquivo .env para produ√ß√£o..."
	@cp templates/env.prod.sample .env
	@echo "‚úÖ Arquivo .env criado a partir de env.prod.sample"
	@echo ""
	@echo "‚ö†Ô∏è  IMPORTANTE - Configure as seguintes vari√°veis obrigat√≥rias em .env:"
	@echo "   ‚Ä¢ DOMAIN                  (seu dom√≠nio de produ√ß√£o)"
	@echo "   ‚Ä¢ QD_BACKEND_SECRET_KEY   (chave secreta do Django)"
	@echo "   ‚Ä¢ Strings de conex√£o dos bancos de dados externos"
	@echo "   ‚Ä¢ Configura√ß√µes do OpenSearch externo"
	@echo "   ‚Ä¢ Configura√ß√µes de storage (S3 ou similar)"
	@echo "   ‚Ä¢ Credenciais do servi√ßo de email"
	@echo ""
	@echo "üí° Ap√≥s configurar, use 'make prod' para fazer o deploy."

dev: setup-env-dev ## Inicia ambiente de desenvolvimento com todos os servi√ßos
	@echo "üöÄ Iniciando ambiente de desenvolvimento..."
	@echo "üåê Criando rede frontend se n√£o existir..."
	@docker network create frontend 2>/dev/null || true
	@echo "üì¶ Iniciando servi√ßos de desenvolvimento..."
	docker compose -f docker-compose.yml -f docker-compose.dev.yml --profile dev up -d
	@echo ""
	@echo "‚úÖ Servi√ßos de desenvolvimento iniciados!"
	@echo ""
	@echo "üìç URLs dispon√≠veis:"
	@echo "   ‚Ä¢ API: http://localhost:8080 ou http://api.queridodiario.local"
	@echo "   ‚Ä¢ Backend: http://localhost:8000 ou http://backend-api.queridodiario.local"
	@echo "   ‚Ä¢ OpenSearch: http://localhost:9200"
	@echo "   ‚Ä¢ MinIO: http://localhost:9000"
	@echo "   ‚Ä¢ Redis: localhost:6378"
	@echo ""
	@echo "üí° Para parar: make clean"

dev-build: setup-env-dev ## Reconstr√≥i e inicia ambiente de desenvolvimento
	@echo "üèóÔ∏è Reconstruindo e iniciando ambiente de desenvolvimento..."
	@echo "üåê Criando rede frontend se n√£o existir..."
	@docker network create frontend 2>/dev/null || true
	@echo "üì¶ Reconstruindo e iniciando servi√ßos..."
	docker compose -f docker-compose.yml -f docker-compose.dev.yml --profile dev up -d --build
	@echo "‚úÖ Servi√ßos de desenvolvimento reconstru√≠dos e iniciados!"

prod: ## Inicia ambiente de produ√ß√£o
	@echo "üöÄ Iniciando ambiente de produ√ß√£o..."
	@if [ ! -f .env ]; then \
		echo "‚ùå Erro: arquivo .env n√£o encontrado!"; \
		echo "üí° Execute 'make setup-env-prod' e configure-o primeiro."; \
		exit 1; \
	fi
	@echo "üåê Criando rede frontend se n√£o existir..."
	@docker network create frontend 2>/dev/null || true
	@echo "üì¶ Iniciando servi√ßos de produ√ß√£o..."
	docker compose -f docker-compose.yml up -d
	@echo ""
	@echo "‚úÖ Servi√ßos de produ√ß√£o iniciados!"
	@echo ""
	@echo "üìç URLs configuradas (verifique seu DNS):"
	@echo "   ‚Ä¢ Frontend: https://$$(grep '^DOMAIN=' .env | cut -d'=' -f2)"
	@echo "   ‚Ä¢ API: https://api.$$(grep '^DOMAIN=' .env | cut -d'=' -f2)"
	@echo "   ‚Ä¢ Backend: https://backend-api.$$(grep '^DOMAIN=' .env | cut -d'=' -f2)"
	@echo ""
	@echo "üí° Para parar: make clean"

prod-build: ## Reconstr√≥i e inicia ambiente de produ√ß√£o
	@echo "üèóÔ∏è Reconstruindo e iniciando ambiente de produ√ß√£o..."
	@if [ ! -f .env ]; then \
		echo "‚ùå Erro: arquivo .env n√£o encontrado!"; \
		echo "üí° Execute 'make setup-env-prod' e configure-o primeiro."; \
		exit 1; \
	fi
	@echo "üåê Criando rede frontend se n√£o existir..."
	@docker network create frontend 2>/dev/null || true
	@echo "üì¶ Reconstruindo e iniciando servi√ßos..."
	docker compose -f docker-compose.yml up -d --build
	@echo "‚úÖ Servi√ßos de produ√ß√£o reconstru√≠dos e iniciados!"

validate: ## Valida sintaxe dos arquivos docker-compose
	@echo "üîç Validando arquivos docker-compose..."
	@echo "Verificando docker-compose de desenvolvimento..."
	@docker compose -f docker-compose.yml -f docker-compose.dev.yml --profile dev config > /dev/null && echo "‚úÖ docker-compose de desenvolvimento est√° v√°lido"
	@echo "Verificando docker-compose de produ√ß√£o..."
	@docker compose -f docker-compose.yml config > /dev/null && echo "‚úÖ docker-compose de produ√ß√£o est√° v√°lido"

clean: ## Para e remove todos os containers, redes e volumes
	@echo "üßπ Limpando containers e volumes..."
	@if docker compose ps --services &>/dev/null; then \
		docker compose -f docker-compose.yml -f docker-compose.dev.yml down -v --remove-orphans 2>/dev/null || true; \
		docker compose -f docker-compose.yml down -v --remove-orphans 2>/dev/null || true; \
	fi
	@echo "‚úÖ Limpeza de containers conclu√≠da!"

clean-env: ## Remove arquivos de ambiente gerados
	@echo "üßπ Limpando arquivos de ambiente..."
	@if [ -f .env ]; then \
		rm .env && echo "Removido .env"; \
	fi
	@echo "‚úÖ Arquivos de ambiente limpos!"

clean-all: clean clean-env ## Remove containers, volumes e arquivos gerados
	@echo "‚úÖ Limpeza completa conclu√≠da!"

logs: ## Mostra logs de todos os servi√ßos
	@if docker compose ps --services &>/dev/null; then \
		docker compose -f docker-compose.yml -f docker-compose.dev.yml logs -f; \
	else \
		docker compose -f docker-compose.yml logs -f; \
	fi

logs-api: ## Mostra logs do servi√ßo API
	@if docker compose ps --services &>/dev/null; then \
		docker compose -f docker-compose.yml -f docker-compose.dev.yml logs -f querido-diario-api; \
	else \
		docker compose -f docker-compose.yml logs -f querido-diario-api; \
	fi

logs-backend: ## Mostra logs do servi√ßo Backend
	@if docker compose ps --services &>/dev/null; then \
		docker compose -f docker-compose.yml -f docker-compose.dev.yml logs -f querido-diario-backend; \
	else \
		docker compose -f docker-compose.yml logs -f querido-diario-backend; \
	fi

logs-traefik: ## Mostra logs do Traefik
	@if docker compose ps --services &>/dev/null; then \
		docker compose -f docker-compose.yml -f docker-compose.dev.yml logs -f traefik; \
	else \
		docker compose -f docker-compose.yml logs -f traefik; \
	fi

status: ## Mostra status de todos os servi√ßos
	@echo "üìä Status dos Servi√ßos:"
	@if docker compose ps --services &>/dev/null; then \
		docker compose -f docker-compose.yml -f docker-compose.dev.yml ps; \
	else \
		docker compose -f docker-compose.yml ps; \
	fi

restart: ## Reinicia todos os servi√ßos
	@echo "üîÑ Reiniciando servi√ßos..."
	@if docker compose ps --services &>/dev/null; then \
		docker compose -f docker-compose.yml -f docker-compose.dev.yml restart; \
	else \
		docker compose -f docker-compose.yml restart; \
	fi
	@echo "‚úÖ Servi√ßos reiniciados!"

update: ## Atualiza todas as imagens de servi√ßos
	@echo "üì¶ Atualizando imagens de servi√ßos..."
	@if docker compose ps --services &>/dev/null; then \
		docker compose -f docker-compose.yml -f docker-compose.dev.yml pull; \
	else \
		docker compose -f docker-compose.yml pull; \
	fi
	@echo "‚úÖ Imagens atualizadas! Execute 'make restart' para aplicar."

# Utilit√°rios de desenvolvimento
db-reset: ## Reseta banco de dados (apenas desenvolvimento)
	@echo "üóÉÔ∏è Resetando banco de dados de desenvolvimento..."
	@if docker compose ps --services &>/dev/null; then \
		docker compose -f docker-compose.yml -f docker-compose.dev.yml exec querido-diario-backend python manage.py migrate; \
	else \
		echo "‚ùå Execute 'make dev' primeiro para iniciar o ambiente de desenvolvimento"; \
	fi
	@echo "‚úÖ Reset do banco de dados conclu√≠do!"

shell-api: ## Abre shell no container da API
	@if docker compose ps --services &>/dev/null; then \
		docker compose -f docker-compose.yml -f docker-compose.dev.yml exec querido-diario-api /bin/bash; \
	else \
		docker compose -f docker-compose.yml exec querido-diario-api /bin/bash; \
	fi

shell-backend: ## Abre shell no container do Backend
	@if docker compose ps --services &>/dev/null; then \
		docker compose -f docker-compose.yml -f docker-compose.dev.yml exec querido-diario-backend /bin/bash; \
	else \
		docker compose -f docker-compose.yml exec querido-diario-backend /bin/bash; \
	fi

health: ## Verifica sa√∫de de todos os servi√ßos
	@echo "üè• Verifica√ß√£o de Sa√∫de:"
	@if docker compose ps --services &>/dev/null; then \
		docker compose -f docker-compose.yml -f docker-compose.dev.yml ps --format "table {{.Service}}\t{{.Status}}\t{{.Ports}}"; \
	else \
		docker compose -f docker-compose.yml ps --format "table {{.Service}}\t{{.Status}}\t{{.Ports}}"; \
	fi

check-env: ## Verifica se as vari√°veis de ambiente obrigat√≥rias est√£o definidas
	@echo "üîç Verificando vari√°veis de ambiente..."
	@if [ -f .env ]; then \
		if grep -q "^DOMAIN=" .env; then \
			echo "‚úÖ Vari√°vel DOMAIN definida: $$(grep '^DOMAIN=' .env | cut -d'=' -f2)"; \
		else \
			echo "‚ùå Vari√°vel DOMAIN n√£o encontrada no .env"; \
		fi; \
		if grep -q "^QD_BACKEND_SECRET_KEY=" .env; then \
			echo "‚úÖ Vari√°vel QD_BACKEND_SECRET_KEY definida"; \
		else \
			echo "‚ùå Vari√°vel QD_BACKEND_SECRET_KEY n√£o encontrada no .env"; \
		fi; \
	else \
		echo "‚ùå Arquivo .env n√£o encontrado. Execute 'make setup-env-dev' ou 'make setup-env-prod' primeiro."; \
	fi

network-create: ## Cria rede frontend para o Traefik
	@echo "üåê Criando rede frontend..."
	@docker network create frontend 2>/dev/null || echo "‚ÑπÔ∏è Rede frontend j√° existe"
	@echo "‚úÖ Rede frontend pronta!"

network-remove: ## Remove rede frontend
	@echo "üóëÔ∏è Removendo rede frontend..."
	@docker network rm frontend 2>/dev/null || echo "‚ÑπÔ∏è Rede frontend n√£o existe"
	@echo "‚úÖ Rede frontend removida!"
